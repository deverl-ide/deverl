%% =====================================================================
%% @author
%% @copyright
%% @title
%% @version
%% @doc This module contains library functions to display common dialogs.
%% @end
%% =====================================================================

-module(lib_dialog_wx).

-include_lib("wx/include/wx.hrl").

%% API
-export([
	get_dir/1,
	get_existing_dir/1,
	text_input_dialog/5,
	msg_error/2,
	msg_notice/2,
	save_changes_dialog/2]).
	
-define(ERROR_CAPTION, "The operation could not continue.").
-define(ID_DISCARD_CHANGES, 12345).

%% =====================================================================
%% Client API
%% =====================================================================

%% =====================================================================
%% @doc Get a directory from the user.

get_dir(Parent) ->
	dir_dialog(Parent, []).
	
	
%% =====================================================================
%% @doc Get an existing directory from the user.
	
get_existing_dir(Parent) ->
	dir_dialog(Parent, [{style, ?wxDD_DIR_MUST_EXIST}]).
	

%% =====================================================================
%% @doc Display a simple two button, single line text input to the user.
%% The events generated by the Ok button will propogate to the parent
%% of this dialog if a callback function is not supplied.
%% The text input is supplied as userData to the event handler.
%% If a callback was supplied, the callback will be invoked 
%% (in another process) to handle the event. The callback should be of 
%% arity 2. fun(EventRecord::wx(), EventObject::wxObject()).
%% The dialog is available in the obj field of EventRecord::wx().
%% Call skip on EventObject::wxObject() to allow default behaviour of
%% buttons.

text_input_dialog(Parent, Title, HelpStr, OkLabel, Options) ->
	AffirmitiveId = proplists:get_value(affirmitive_id, Options, ?wxID_OK),
	Callback = proplists:get_value(callback, Options),
	InitText = proplists:get_value(init_text, Options, []),
	
	Dialog = wxDialog:new(Parent, ?wxID_ANY, Title),

	Panel = wxPanel:new(Dialog),
	Sz = wxBoxSizer:new(?wxVERTICAL),
	wxSizer:addSpacer(Sz, 10),

	wxSizer:add(Sz, wxStaticText:new(Panel, ?wxID_ANY, HelpStr),
	  [{border,10}, {flag, ?wxEXPAND bor ?wxLEFT}]),
	wxSizer:addSpacer(Sz, 7),
	Input = wxTextCtrl:new(Panel, ?wxID_ANY, []),
	wxTextCtrl:setValue(Input, InitText),
	wxSizer:add(Sz, Input, [{border,10}, {flag, ?wxEXPAND bor ?wxLEFT bor ?wxRIGHT}, {proportion, 1}]),
	wxSizer:addSpacer(Sz, 15),

	ButtonSz = wxBoxSizer:new(?wxHORIZONTAL),
	wxSizer:addSpacer(ButtonSz, 10),
	wxSizer:add(ButtonSz, wxButton:new(Panel, ?wxID_CANCEL,
	  [{label,"Cancel"}]), [{border,10}, {flag, ?wxEXPAND bor ?wxBOTTOM}]),
	DefButton = wxButton:new(Panel, AffirmitiveId, [{label,OkLabel}]),
	wxButton:setDefault(DefButton),
	wxSizer:add(ButtonSz, DefButton, [{border,10}, {flag, ?wxEXPAND bor ?wxBOTTOM bor ?wxLEFT}]),
	wxSizer:addSpacer(ButtonSz, 10),
	wxSizer:add(Sz, ButtonSz),

	EvtOptions = [{userData, Input}],
	Result = case Callback of
		undefined -> 
			%% Force events to propagate beyond this dialog
			wxDialog:setExtraStyle(Dialog, wxDialog:getExtraStyle(Dialog) band (bnot ?wxWS_EX_BLOCK_EVENTS)),
			[];
		Cb -> [{callback, Cb}]
	end,
	wxButton:connect(Dialog, command_button_clicked, EvtOptions ++ Result),

	wxPanel:setSizer(Panel, Sz),
	wxSizer:layout(Sz),
	wxSizer:setSizeHints(Sz, Dialog),
	wxDialog:show(Dialog),
	wxWindow:setFocusFromKbd(Input).
	

%% =====================================================================
%% @doc Display an error message to the user.

msg_error(Parent, Msg) ->
	msg_dialog(Parent, Msg, ?ERROR_CAPTION, ?wxICON_ERROR bor ?wxOK).


%% =====================================================================
%% @doc Display a notice to the user.
	
msg_notice(Parent, Msg) ->
	msg_dialog(Parent, Msg, "Notice..", ?wxICON_INFORMATION bor ?wxOK).	


%% =====================================================================
%% Display the save changes dialog.

save_changes_dialog(Parent, Filenames) ->
	Heading = "The following documents have been modified. Would you like to save the changes?",
  L = lists:flatten([Filename ++ io_lib:nl() || Filename <- Filenames]),
	SubHeading = L ++ "All changes will be lost if you don't save.",
	Btn1 = {?wxID_REVERT_TO_SAVED, [{label, "Discard Changes"}], [{connect_handler, true}]},
	Btn2 = {?wxID_CANCEL, [], []},
	Btn3 = {?wxID_SAVE, [], [{connect_handler, true}]},
	Buttons = [Btn1, Btn2, Btn3],
	generic_dialog(Parent, Heading, Buttons, [{sub_heading, SubHeading}, {stretch_spacer, 1}]).


%% =====================================================================
%% Internal functions
%% =====================================================================

%% =====================================================================
%% @doc The standard message dialog for the application.
%% Use this function to build all message dialogs for a regular look
%% and feel.
%% 
%% Buttons :: [Button] A list of buttons where
%% Button ::	{ButtonId, ButtonOptions, [ButtonConfig]}
%% The first element is a wx_object id. The second element a list of
%% options passed directly to wxButton:new(), the third is a list of
%% options used to configure each button in the dialog. 
%% ButtonConfig :: {connect_handler:, boolean()} Set to true if the ButtonId
%% doesn't have a default handler.
%%
%% Options: 	{sub_heading, string()} Smaller, second level heading.
%% 						{stretch_spacer, Index :: integer()} Add a stretch spacer at 
%%						position Index between the buttons. Default is 0 (buttons 
%%						aligned right). 
%% @end
%% @private

-spec generic_dialog(Parent, Heading, [Button], [Option]) -> Result when
	Parent :: wx:wx_object(),
	Heading :: string(),
	Button :: {integer(), list(), [ButtonOption]},
	ButtonOption :: {connect_handler, boolean()},
	Option :: {sub_heading, string()}
		| {stretch_spacer, integer()},
	Result :: wxDialog:wxDialog().

generic_dialog(Parent, Heading, Buttons, Option) ->
	Dialog = wxDialog:new(Parent, ?wxID_ANY, []),
	Sz = wxBoxSizer:new(?wxHORIZONTAL),
	wxDialog:setSizer(Dialog, Sz),
	wxSizer:addSpacer(Sz, 30),
	
	%% Icon placeholder
	Icon = wxPanel:new(Dialog, [{size, {70,70}}]),
	wxPanel:setBackgroundColour(Icon, ?wxWHITE),
	wxSizer:add(Sz, Icon, [{flag, ?wxTOP}, {border, 20}]),
	wxSizer:addSpacer(Sz, 20),
	
	Sz2 = wxBoxSizer:new(?wxVERTICAL),
	St = wxStaticText:new(Dialog, ?wxID_ANY, Heading, []),
	wxStaticText:wrap(St, 320),
	Font = wxDialog:getFont(Dialog),
	wxFont:setWeight(Font, ?wxFONTWEIGHT_BOLD),
	wxStaticText:setFont(St, Font),
	wxSizer:add(Sz2, St, []),
	wxSizer:addSpacer(Sz2, 10),
	
	case proplists:get_value(sub_heading, Option) of
		undefined -> ok;
		SubHeading ->
			St2 = wxStaticText:new(Dialog, ?wxID_ANY, SubHeading),
			wxStaticText:wrap(St2, 320),
			wxFont:setWeight(Font, ?wxFONTWEIGHT_NORMAL),
			wxFont:setPointSize(Font, wxFont:getPointSize(Font) - 2),
			wxStaticText:setFont(St2, Font),
			wxSizer:add(Sz2, St2, []),
			wxSizer:addSpacer(Sz2, 20)
	end,
	
	%% Buttons
	Handler = 
	fun(Id) -> 
		Fun = fun(_,_) -> 
			wxDialog:endModal(Dialog, Id)
		end,
		Fun
	end,
	
	L = length(Buttons),
	ButtonSz = wxBoxSizer:new(?wxHORIZONTAL),
	lists:foldl(fun({Id, ButtonFlags, Config}, Acc) ->
		Button = wxButton:new(Dialog, Id, ButtonFlags),
		case proplists:get_value(connect_handler, Config) of
			true ->
				wxButton:connect(Button, command_button_clicked, [{callback, Handler(Id)}]);
			_ -> ok
		end,
		wxSizer:add(ButtonSz, Button, [{flag, ?wxALIGN_RIGHT}]),
		case Acc of 
			L -> ok;
			_ -> wxSizer:addSpacer(ButtonSz, 15)
		end,
		Acc + 1
	end, 1, Buttons),
	
	wxSizer:insertStretchSpacer(ButtonSz, proplists:get_value(stretch_spacer, Option, 0)),
		
	wxSizer:add(Sz2, ButtonSz, [{flag, ?wxEXPAND}, {proportion, 1}]),
	wxSizer:addSpacer(Sz2, 20),
	
	wxSizer:add(Sz, Sz2, [{flag, ?wxTOP}, {border, 20}]),
	wxSizer:addSpacer(Sz, 20),
	
	wxSizer:fit(Sz, Dialog),
	wxSizer:layout(Sz),
	wxDialog:layout(Dialog),
	Dialog.


%% =====================================================================
%% @doc Display a choose directory dialog; gets a directory grom the 
%% user.
%% @private

dir_dialog(Parent, Args) ->
	Dialog = wxDirDialog:new(Parent, Args),
	case wxDirDialog:showModal(Dialog) of
		?wxID_OK -> 
			wxDirDialog:getPath(Dialog);
		?wxID_CANCEL -> cancelled
	end.
	

%% =====================================================================
%% @doc Display a message to the user.

-spec msg_dialog(Parent, Msg, Caption, Styles) -> 'ok' when
	Parent :: wxWindow:wxWindow(),
	Msg :: string() | [],
	Caption :: string() | [],
	Styles :: integer(). %% For styles see wxMessageDialog

msg_dialog(Parent, Msg, Caption, Styles) ->
	Dialog = wxMessageDialog:new(Parent, Msg, [{style, Styles bor ?wxSTAY_ON_TOP}, {caption, Caption}]),
	wxMessageDialog:showModal(Dialog).