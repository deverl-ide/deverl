%% This module contains library functions to display standard wx dialogs
-module(lib_dialog_wx).
-include_lib("wx/include/wx.hrl").

-define(ERROR_CAPTION, "The operation could not continue.").

-export([
	get_dir/1,
	get_existing_dir/1,
	text_input_dialog/5,
	msg_error/2,
	msg_notice/2]).
	
	
%% =====================================================================
%% @doc Get a directory from the user.

get_dir(Parent) ->
	dir_dialog(Parent, []).
	
	
%% =====================================================================
%% @doc Get an existing directory from the user.
	
get_existing_dir(Parent) ->
	dir_dialog(Parent, [{style, ?wxDD_DIR_MUST_EXIST}]).
	
	
%% =====================================================================
%% @doc Display a choose directory dialog; gets a directory grom the 
%% user.
%% @private

dir_dialog(Parent, Args) ->
	Dialog = wxDirDialog:new(Parent, Args),
	case wxDirDialog:showModal(Dialog) of
		?wxID_OK -> 
			wxDirDialog:getPath(Dialog);
		?wxID_CANCEL -> cancelled
	end.
	
	
%% =====================================================================
%% @doc Display a simple two button, single line text input to the user.
%% The events generated by the Ok button will propogate to the parent
%% of this dialog if a callback function is not supplied.
%% The text input is supplied as userData to the event handler.
%% If a callback was supplied, the callback will be invoked 
%% (in another process) to handle the event. The callback should be of 
%% arity 2. fun(EventRecord::wx(), EventObject::wxObject()).
%% The dialog is available in the obj field of EventRecord::wx().
%% Call skip on EventObject::wxObject() to allow default behaviour of
%% buttons.

text_input_dialog(Parent, Title, HelpStr, OkLabel, Options) ->
	AffirmitiveId = proplists:get_value(affirmitive_id, Options, ?wxID_OK),
	Callback = proplists:get_value(callback, Options),
	InitText = proplists:get_value(init_text, Options, []),
	
	Dialog = wxDialog:new(Parent, ?wxID_ANY, Title),

	Panel = wxPanel:new(Dialog),
	Sz = wxBoxSizer:new(?wxVERTICAL),
	wxSizer:addSpacer(Sz, 10),

	wxSizer:add(Sz, wxStaticText:new(Panel, ?wxID_ANY, HelpStr),
	  [{border,10}, {flag, ?wxEXPAND bor ?wxLEFT}]),
	wxSizer:addSpacer(Sz, 7),
	Input = wxTextCtrl:new(Panel, ?wxID_ANY, []),
	wxTextCtrl:setValue(Input, InitText),
	wxSizer:add(Sz, Input, [{border,10}, {flag, ?wxEXPAND bor ?wxLEFT bor ?wxRIGHT}, {proportion, 1}]),
	wxSizer:addSpacer(Sz, 15),

	ButtonSz = wxBoxSizer:new(?wxHORIZONTAL),
	wxSizer:addSpacer(ButtonSz, 10),
	wxSizer:add(ButtonSz, wxButton:new(Panel, ?wxID_CANCEL,
	  [{label,"Cancel"}]), [{border,10}, {flag, ?wxEXPAND bor ?wxBOTTOM}]),
	DefButton = wxButton:new(Panel, AffirmitiveId, [{label,OkLabel}]),
	wxButton:setDefault(DefButton),
	wxSizer:add(ButtonSz, DefButton, [{border,10}, {flag, ?wxEXPAND bor ?wxBOTTOM bor ?wxLEFT}]),
	wxSizer:addSpacer(ButtonSz, 10),
	wxSizer:add(Sz, ButtonSz),

	EvtOptions = [{userData, Input}],
	Result = case Callback of
		undefined -> 
			%% Force events to propagate beyond this dialog
			wxDialog:setExtraStyle(Dialog, wxDialog:getExtraStyle(Dialog) band (bnot ?wxWS_EX_BLOCK_EVENTS)),
			[];
		Cb -> [{callback, Cb}]
	end,
	wxButton:connect(Dialog, command_button_clicked, EvtOptions ++ Result),

	wxPanel:setSizer(Panel, Sz),
	wxSizer:layout(Sz),
	wxSizer:setSizeHints(Sz, Dialog),
	wxDialog:show(Dialog),
	wxWindow:setFocusFromKbd(Input).


%% =====================================================================
%% @doc Display an error message to the user.

msg_error(Parent, Msg) ->
	msg_dialog(Parent, Msg, "Notice..", ?wxICON_INFORMATION bor ?wxOK).


%% =====================================================================
%% @doc Display a notice to the user.
	
msg_notice(Parent, Msg) ->
	msg_dialog(Parent, Msg, ?ERROR_CAPTION, ?wxICON_ERROR bor ?wxOK).


%% =====================================================================
%% @doc Display a message to the user.

-spec msg_dialog(Parent, Msg, Caption, Styles) -> 'ok' when
	Parent :: wxWindow:wxWindow(),
	Msg :: string() | [],
	Caption :: string() | [],
	Styles :: integer(). %% For styles see wxMessageDialog

msg_dialog(Parent, Msg, Caption, Styles) ->
	Dialog = wxMessageDialog:new(Parent, Msg, [{style, Styles bor ?wxSTAY_ON_TOP}, {caption, Caption}]),
	wxMessageDialog:showModal(Dialog).